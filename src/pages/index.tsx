import Button from "@/components/Button";
import Layout from "@/components/Layout";
import useLoadList from "@/helpers/hooks/useLoadList";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import moment from "moment";
import { getNetworkName, getNetworkColorName } from "@/helpers/utils/networks";
import useLoadListMumbai from "@/helpers/hooks/useLoadListMatic";
import useLoadListRinkeby from "@/helpers/hooks/useLoadListRinkeby";
const Home: NextPage = () => {
  // const { showModal, closeModal } = useModal()

  const { data, loading } = useLoadList();
  const { data: dataMumbai, loading: loadingMumbai } = useLoadListMumbai()
  const { data: dataRinkeby, loading: looadingRinkeby } = useLoadListRinkeby()

  return (
    <Layout>
      <div className="bgmain h-full w-full min-h-screen p-6 font-mono">
        {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}

        <div className="text-4xl text-white font-semibold">
          Atomixy - MultiChain, Crowd Sourcing, Crowd FundingüöÄ
          <br />
        </div>
        <div className="text-xl text-gray-200">
          Fully decentralised, and Open Sourced mapping tools <br /> to help you visualise informations while collaborating with others
        </div>
        <br />
        <br />
        <div className="w-full place-items-center items-center text-rose-300 flex row align-middle">
          starts making your project -> &nbsp;
          <Link href={`/flow/create`}>
            <Button>Create Flow</Button>
          </Link>
        </div>
        <br />
        <hr />
        <br />
        <div className="grid grid-cols-2 gap-4 w-full">
          <div className="text-white font-mono">
            <div>Available Network: </div>
            <div className="flex row">Mainnet-> Polygon, &nbsp; <div className="line-through">Solana </div>(Coming Soon)</div>
            <div>Testnet-> Rinkeby, Kovan, Mumbai</div>
          </div>
          <div className="text-white">
            <div>Arweave storage -> Polygon mainnet ‚úÖ , All testnet ‚ùå</div>
            <div>IPFS storage -> All testnets ‚úÖ, Polygon mainnet ‚ùå </div>
            <div>Test Funding -> All mainnet ‚ùå, All testnet ‚ùå, Local ‚úÖ</div>

            <br />
            <div className="text-xs text-rose-500">(*for security, funding won't be available in mainnet until v2-alpha,
              but you can fully try it on local blockchain,
              I did deploy smart contract on testnet but seems have problem with gas issue, you can check the minimal deployed contract
              <a className="text-blue-400" href="https://github.com/Atomixy/contract-evm/blob/master/Token.sol"> here</a>
            </div>
          </div>
        </div>

        <br />
        <hr />

        {/* IMAGES OF FLOW examples */}
        <br />
        <div className=" grid grid-cols-2 gap-2">
          <div className=" overflow-scroll" style={{ maxHeight: 700 }}>
            <h3 className="text-white mb-2">All networks:</h3>

            {loading && <div className="text-white text-3xl">Loading...</div>}

            {!!data?.length &&
              data.map((item, i) => <List key={i} {...item} index={i} />)}
          </div>
          <div>
            <img src="./home.png" />
          </div>
        </div>
        <br />
        <hr />
        <br />

        <div className=" grid grid-cols-2 gap-2">
          <div className=" overflow-scroll">
            <h3 className="text-white mb-2">Mumbai Testnet: <a href="https://faucet.polygon.technology/" className="text-blue-400">faucet</a></h3>

            {loadingMumbai && <div className="text-white text-3xl">Loading...</div>}

            {!!dataMumbai?.length &&
              dataMumbai.map((item, i) => <List key={i} {...item} index={i} />)}
          </div>
          <div>
            <div className=" overflow-scroll">
              <h3 className="text-white mb-2">Rinkeby Testnet:  <a href="https://faucets.chain.link/rinkeby" className="text-blue-400">faucet</a></h3>


              {looadingRinkeby && <div className="text-white text-3xl">Loading...</div>}

              {!!dataRinkeby?.length &&
                dataRinkeby.map((item, i) => <List key={i} {...item} index={i} />)}
            </div>
          </div>
        </div>

      </div>
    </Layout>
  );
};

export default Home;

// #414a4c	(65,74,76)
// #3b444b	(59,68,75)
// #353839	(53,56,57)
// #232b2b

const List = (props) => {

  // also setKey to zustand, and reset at this page? how about multiple page?
  return (
    <Link
      //send id ipfs, query -> network
      href={`/flow/${props?.storageID}?key=${props.indexID}&storage=${props?.storage_type}&chainid=${props?.chainId}`}
      // href={`/flow/${props?.ipfsPath}?key=${props.index}&storage=${props?.frozenData}`}
    >
      <div className="p-4 mb-4 mx-1 bg-white rounded-md  cursor-pointer">
        <div className="text-gray-500 text-xs ">
          {" "}
          {moment.unix(props?.createdAt).fromNow()}
        </div>

        <div className="text-gray-700 font-semibold ">{props?.title}</div>
        <div className="text-gray-500">{props.description}</div>
        {/* <div>Created by</div> */}
        <hr className="my-2" />
        {/* <div>tags tags tags</div> */}
        <div className="flex row justify-between">
          <div className="font-medium ">{props?.storage_type}</div>

          {/* ${getNetworkColorName(props?.chainId)} */}
          <div
            style={{
              color: getNetworkName(props?.chainId) === 'Rinkeby' ? 'orange' :
                getNetworkName(props?.chainId) === 'Kovan' ? 'blue' :
                  getNetworkName(props?.chainId) === 'Mumbai' ? 'hotpink' :
                    'purple'
            }}
            className={`text-md `}>
            {getNetworkName(props?.chainId)}
          </div>
        </div>
      </div>
    </Link>
  );
};

// chainId: 137
// createdAt: 1647060511
// index: 2
// indexID: 0
// networks: "Polygon"
// storageID: "Error..."
// storageURL: "https://arweave.net/Error..."
// storage_type: "ARWEAVE"
