import Button from "@/components/Button";
import Layout from "@/components/Layout";
import useLoadList from "@/helpers/hooks/useLoadList";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import moment from 'moment'
import { getNetworkName, getNetworkColorName } from "@/helpers/utils/networks";
const Home: NextPage = () => {
  // const { showModal, closeModal } = useModal()

  const { data, loading } = useLoadList();


  return (
    <Layout>
      <div className="bgmain h-full w-full min-h-screen p-6">
        {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}

        <div className="text-6xl text-white font-semibold">
          Atomixy - MultiChain Crowd Sourcing
          <br />

        </div>
        <div className="text-xl text-gray-200">

          Fully decentralised mapping tools to help you visualizing informations 
        </div>
        <br />
        <br />
        <div className="w-full place-items-center items-center ">
          <Link href={`/flow/create`}>
            <Button>Create Flow</Button>
          </Link>
        </div>

        {/* IMAGES OF FLOW examples */}
        <br />
        <div className=" grid grid-cols-2 gap-2">

          <div className=" overflow-scroll">
            {loading && <div className="text-white text-3xl">Loading...</div>}

            {!!data?.length &&
              data.map((item, i) => <List key={i} {...item} index={i} />)}
          </div>
          <div>
            <img src="./home.png" />
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default Home;

// #414a4c	(65,74,76)
// #3b444b	(59,68,75)
// #353839	(53,56,57)
// #232b2b

const List = (props) => {
  console.log(props, 'props')

  // also setKey to zustand, and reset at this page? how about multiple page?
  return (
    <Link
      //send id ipfs, query -> network
      href={`/flow/${props?.storageID}?key=${props.indexID}&storage=${props?.storage_type}`}
      // href={`/flow/${props?.ipfsPath}?key=${props.index}&storage=${props?.frozenData}`}
    >
      <div className="p-4 mb-4 mx-1 bg-white rounded-md  cursor-pointer">
        <div className="text-gray-500 text-xs "> {moment.unix(props?.createdAt).fromNow()}</div>

        <div className="text-gray-700 font-semibold ">{props?.title}</div>
        <div className="text-gray-500">{props.description}</div>
        {/* <div>Created by</div> */}
        <hr className="my-2" />
        {/* <div>tags tags tags</div> */}
        <div className="flex row justify-between">
          <div className="font-medium ">{props?.storage_type}</div>

          {/* ${getNetworkColorName(props?.chainId)} */}
          <div className={`text-md text-purple-600 `} >{getNetworkName(props?.chainId)}</div>
        </div>

      </div>
    </Link>
  );
};

